# serializer version: 1
# name: test_entry_diagnostics[unknown_make]
  dict({
    'data': dict({
      'VIWP1AB29P15LA85784N': dict({
        'charge-chargelimits': dict({
          'values': list([
            dict({
              'condition': None,
              'limit': 0.8,
              'type': 'global',
            }),
          ]),
        }),
        'charge-ischarging': dict({
          'value': False,
        }),
        'charge-ischargingcableconnected': dict({
          'value': True,
        }),
        'closure-islocked': dict({
          'value': False,
        }),
        'internalcombustionengine-amountremaining': dict({
          'value': 53.2,
        }),
        'internalcombustionengine-fuellevel': dict({
          'value': 0.3,
        }),
        'internalcombustionengine-oillife': dict({
          'value': 0.35,
        }),
        'internalcombustionengine-range': dict({
          'value': 40.5,
        }),
        'location-preciselocation': dict({
          'value': dict({
            'latitude': '**REDACTED**',
            'longitude': '**REDACTED**',
          }),
        }),
        'location-preciselocation:data_age': '2019-10-24T00:43:46+00:00',
        'odometer-traveleddistance': dict({
          'value': 37829,
        }),
        'odometer-traveleddistance:data_age': '2019-10-24T00:43:46+00:00',
        'odometer-traveleddistance:unit_system': 'metric',
        'tractionbattery-nominalcapacity': dict({
          'availableCapacities': list([
          ]),
          'capacity': 70.9,
        }),
        'tractionbattery-range': dict({
          'value': 40.5,
        }),
        'tractionbattery-stateofcharge': dict({
          'value': 0.3,
        }),
        'v2only-charge': dict({
          'value': 'FULLY_CHARGED',
        }),
        'wheel-tires': dict({
          'columnCount': 2,
          'rowCount': 2,
          'values': list([
            dict({
              'column': 1,
              'row': 0,
              'tirePressure': 219.3,
            }),
            dict({
              'column': 0,
              'row': 0,
              'tirePressure': 219.3,
            }),
            dict({
              'column': 1,
              'row': 1,
              'tirePressure': 219.3,
            }),
            dict({
              'column': 0,
              'row': 1,
              'tirePressure': 219.3,
            }),
          ]),
        }),
        'wheel-tires:data_age': '2019-10-24T00:43:46+00:00',
        'wheel-tires:unit_system': 'metric',
      }),
    }),
    'entry': dict({
      'data': dict({
        'auth_implementation': 'smartcar',
        'token': dict({
          'access_tier': 0,
          'access_token': '**REDACTED**',
          'installed_app_id': '2d474f47-bab5-4438-9d37-478148b9d073',
          'refresh_token': '**REDACTED**',
          'scopes': 'read_vehicle_info read_vin read_battery read_charge read_engine_oil read_fuel read_location read_odometer read_security read_tires control_charge control_security',
        }),
        'vehicles': dict({
          'a1d50709-3502-4faa-ba43-a5c7565e6a09': dict({
            'vin': '**REDACTED**',
          }),
        }),
      }),
      'disabled_by': None,
      'discovery_keys': dict({
      }),
      'domain': 'smartcar',
      'minor_version': 0,
      'options': dict({
      }),
      'pref_disable_new_entities': False,
      'pref_disable_polling': False,
      'source': 'user',
      'subentries': list([
      ]),
      'title': 'Mock Title',
      'unique_id': 'a1d50709-3502-4faa-ba43-a5c7565e6a09',
      'version': 2,
    }),
    'webhook_url': None,
  })
# ---
# name: test_entry_diagnostics[vw_id_4]
  dict({
    'data': dict({
      'VIWP1AB29P15LA85784N': dict({
        'charge-chargelimits': dict({
          'values': list([
            dict({
              'condition': None,
              'limit': 1,
              'type': 'global',
            }),
          ]),
        }),
        'charge-chargelimits:data_age': '2025-05-09T15:40:55+00:00',
        'charge-chargelimits:fetched_at': '2025-05-09T17:27:26.712000+00:00',
        'charge-ischarging': dict({
          'value': False,
        }),
        'charge-ischarging:data_age': '2025-05-09T15:40:57+00:00',
        'charge-ischarging:fetched_at': '2025-05-09T17:27:26.712000+00:00',
        'charge-ischargingcableconnected': dict({
          'value': False,
        }),
        'charge-ischargingcableconnected:data_age': '2025-05-09T15:40:57+00:00',
        'charge-ischargingcableconnected:fetched_at': '2025-05-09T17:27:26.712000+00:00',
        'closure-islocked': dict({
          'value': None,
        }),
        'internalcombustionengine-amountremaining': dict({
          'value': None,
        }),
        'internalcombustionengine-fuellevel': dict({
          'value': None,
        }),
        'internalcombustionengine-oillife': dict({
          'value': None,
        }),
        'internalcombustionengine-range': dict({
          'value': None,
        }),
        'location-preciselocation': dict({
          'value': dict({
            'latitude': '**REDACTED**',
            'longitude': '**REDACTED**',
          }),
        }),
        'location-preciselocation:data_age': '2025-05-09T15:40:52+00:00',
        'location-preciselocation:fetched_at': '2025-05-09T17:27:25.401000+00:00',
        'odometer-traveleddistance': dict({
          'value': 21919,
        }),
        'odometer-traveleddistance:data_age': '2025-05-09T15:40:52+00:00',
        'odometer-traveleddistance:fetched_at': '2025-05-09T17:27:25.401000+00:00',
        'odometer-traveleddistance:unit_system': 'metric',
        'tractionbattery-nominalcapacity': dict({
          'availableCapacities': list([
          ]),
          'capacity': 82,
        }),
        'tractionbattery-nominalcapacity:data_age': '2025-05-09T17:27:25.114000+00:00',
        'tractionbattery-nominalcapacity:fetched_at': '2025-05-09T17:27:25.114000+00:00',
        'tractionbattery-range': dict({
          'value': 275,
        }),
        'tractionbattery-range:data_age': '2025-05-09T15:40:57+00:00',
        'tractionbattery-range:fetched_at': '2025-05-09T17:27:26.712000+00:00',
        'tractionbattery-range:unit_system': 'metric',
        'tractionbattery-stateofcharge': dict({
          'value': 0.68,
        }),
        'tractionbattery-stateofcharge:data_age': '2025-05-09T15:40:57+00:00',
        'tractionbattery-stateofcharge:fetched_at': '2025-05-09T17:27:26.712000+00:00',
        'tractionbattery-stateofcharge:unit_system': 'metric',
        'v2only-charge': dict({
          'value': 'NOT_CHARGING',
        }),
        'v2only-charge:data_age': '2025-05-09T15:40:57+00:00',
        'v2only-charge:fetched_at': '2025-05-09T17:27:26.712000+00:00',
        'wheel-tires': dict({
          'columnCount': 2,
          'rowCount': 2,
          'values': list([
            dict({
              'column': 1,
              'row': 0,
              'tirePressure': None,
            }),
            dict({
              'column': 0,
              'row': 0,
              'tirePressure': None,
            }),
            dict({
              'column': 1,
              'row': 1,
              'tirePressure': None,
            }),
            dict({
              'column': 0,
              'row': 1,
              'tirePressure': None,
            }),
          ]),
        }),
      }),
    }),
    'entry': dict({
      'data': dict({
        'auth_implementation': 'smartcar',
        'token': dict({
          'access_tier': 0,
          'access_token': '**REDACTED**',
          'installed_app_id': '2d474f47-bab5-4438-9d37-478148b9d073',
          'refresh_token': '**REDACTED**',
          'scopes': 'read_vehicle_info read_vin read_battery read_charge read_engine_oil read_fuel read_location read_odometer read_security read_tires control_charge control_security',
        }),
        'vehicles': dict({
          'a1d50709-3502-4faa-ba43-a5c7565e6a09': dict({
            'make': 'VW',
            'model': 'ID.4',
            'vin': '**REDACTED**',
            'year': '2021',
          }),
        }),
      }),
      'disabled_by': None,
      'discovery_keys': dict({
      }),
      'domain': 'smartcar',
      'minor_version': 0,
      'options': dict({
      }),
      'pref_disable_new_entities': False,
      'pref_disable_polling': False,
      'source': 'user',
      'subentries': list([
      ]),
      'title': 'Mock Title',
      'unique_id': 'a1d50709-3502-4faa-ba43-a5c7565e6a09',
      'version': 2,
    }),
    'webhook_url': None,
  })
# ---
