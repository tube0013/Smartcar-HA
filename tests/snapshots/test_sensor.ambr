# serializer version: 1
# name: test_limited_scopes[enabled_entities0-enabled_scopes0-vw_id_4][sensor.vw_id_4_battery-api-battery-request]
  tuple(
    'post',
    URL('http://test.local/v2.0/vehicles/a1d50709-3502-4faa-ba43-a5c7565e6a09/batch'),
    dict({
      'requests': list([
        dict({
          'path': '/battery',
        }),
      ]),
    }),
    dict({
      'authorization': 'Bearer mock-token',
    }),
  )
# ---
# name: test_limited_scopes[enabled_entities0-enabled_scopes0-vw_id_4][sensor.vw_id_4_battery-registry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.vw_id_4_battery',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.BATTERY: 'battery'>,
    'original_icon': None,
    'original_name': 'Battery',
    'platform': 'smartcar',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': None,
    'unique_id': 'VIWP1AB29P15LA85784N_battery_level',
    'unit_of_measurement': '%',
  })
# ---
# name: test_limited_scopes[enabled_entities0-enabled_scopes0-vw_id_4][sensor.vw_id_4_battery]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'age': '2025-05-09T15:40:57+00:00',
      'device_class': 'battery',
      'fetched_at': '2025-05-09T17:27:26.712000+00:00',
      'friendly_name': 'VW ID.4 Battery',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_battery',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '68',
  })
# ---
# name: test_polling_updates[vw_id_4][sensor.vw_id_4_odometer-api-batch-without-odometer-request]
  tuple(
    'post',
    URL('http://test.local/v2.0/vehicles/a1d50709-3502-4faa-ba43-a5c7565e6a09/batch'),
    dict({
      'requests': list([
        dict({
          'path': '/battery',
        }),
        dict({
          'path': '/battery/nominal_capacity',
        }),
        dict({
          'path': '/charge',
        }),
        dict({
          'path': '/charge/limit',
        }),
        dict({
          'path': '/engine/oil',
        }),
        dict({
          'path': '/fuel',
        }),
        dict({
          'path': '/location',
        }),
        dict({
          'path': '/security',
        }),
        dict({
          'path': '/tires/pressure',
        }),
      ]),
    }),
    dict({
      'authorization': 'Bearer mock-token',
    }),
  )
# ---
# name: test_polling_updates[vw_id_4][sensor.vw_id_4_odometer-api-full-batch-request]
  tuple(
    'post',
    URL('http://test.local/v2.0/vehicles/a1d50709-3502-4faa-ba43-a5c7565e6a09/batch'),
    dict({
      'requests': list([
        dict({
          'path': '/battery',
        }),
        dict({
          'path': '/battery/nominal_capacity',
        }),
        dict({
          'path': '/charge',
        }),
        dict({
          'path': '/charge/limit',
        }),
        dict({
          'path': '/engine/oil',
        }),
        dict({
          'path': '/fuel',
        }),
        dict({
          'path': '/location',
        }),
        dict({
          'path': '/odometer',
        }),
        dict({
          'path': '/security',
        }),
        dict({
          'path': '/tires/pressure',
        }),
      ]),
    }),
    dict({
      'authorization': 'Bearer mock-token',
    }),
  )
# ---
# name: test_polling_updates[vw_id_4][sensor.vw_id_4_odometer-api-odometer-request]
  tuple(
    'post',
    URL('http://test.local/v2.0/vehicles/a1d50709-3502-4faa-ba43-a5c7565e6a09/batch'),
    dict({
      'requests': list([
        dict({
          'path': '/odometer',
        }),
      ]),
    }),
    dict({
      'authorization': 'Bearer mock-token',
    }),
  )
# ---
# name: test_polling_updates[vw_id_4][sensor.vw_id_4_odometer-registry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.vw_id_4_odometer',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DISTANCE: 'distance'>,
    'original_icon': None,
    'original_name': 'Odometer',
    'platform': 'smartcar',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': None,
    'unique_id': 'VIWP1AB29P15LA85784N_odometer',
    'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
  })
# ---
# name: test_polling_updates[vw_id_4][sensor.vw_id_4_odometer]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'age': '2025-05-09T15:40:52+00:00',
      'device_class': 'distance',
      'fetched_at': '2025-05-09T17:27:25.401000+00:00',
      'friendly_name': 'VW ID.4 Odometer',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_odometer',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '21919',
  })
# ---
# name: test_restore_sensor_save_state[vw_id_4-value_and_timestamps]
  list([
    dict({
      'data_age': '2025-05-29T19:47:32+00:00',
      'fetched_at': '2025-05-29T20:09:57+00:00',
      'raw_value': 45.2,
    }),
  ])
# ---
# name: test_restore_sensor_save_state[vw_id_4-value_and_unit_system]
  list([
    dict({
      'raw_value': 45.2,
      'unit_system': 'imperial',
    }),
  ])
# ---
# name: test_restore_sensor_save_state[vw_id_4-value_complex]
  list([
    dict({
      'raw_value': list([
        dict({
          'column': 1,
          'row': 0,
          'tirePressure': 234,
        }),
      ]),
    }),
  ])
# ---
# name: test_restore_sensor_save_state[vw_id_4-value_only]
  list([
    dict({
      'raw_value': 0.34,
    }),
  ])
# ---
# name: test_unit_conversion[imperial-vw_id_4][sensor.vw_id_4_odometer-api-full-batch-request]
  tuple(
    'post',
    URL('http://test.local/v2.0/vehicles/a1d50709-3502-4faa-ba43-a5c7565e6a09/batch'),
    dict({
      'requests': list([
        dict({
          'path': '/battery',
        }),
        dict({
          'path': '/battery/nominal_capacity',
        }),
        dict({
          'path': '/charge',
        }),
        dict({
          'path': '/charge/limit',
        }),
        dict({
          'path': '/engine/oil',
        }),
        dict({
          'path': '/fuel',
        }),
        dict({
          'path': '/location',
        }),
        dict({
          'path': '/odometer',
        }),
        dict({
          'path': '/security',
        }),
        dict({
          'path': '/tires/pressure',
        }),
      ]),
    }),
    dict({
      'authorization': 'Bearer mock-token',
    }),
  )
# ---
# name: test_unit_conversion[imperial-vw_id_4][sensor.vw_id_4_odometer-api-odometer-request]
  tuple(
    'post',
    URL('http://test.local/v2.0/vehicles/a1d50709-3502-4faa-ba43-a5c7565e6a09/batch'),
    dict({
      'requests': list([
        dict({
          'path': '/odometer',
        }),
      ]),
    }),
    dict({
      'authorization': 'Bearer mock-token',
    }),
  )
# ---
# name: test_unit_conversion[imperial-vw_id_4][sensor.vw_id_4_odometer-registry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.vw_id_4_odometer',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DISTANCE: 'distance'>,
    'original_icon': None,
    'original_name': 'Odometer',
    'platform': 'smartcar',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': None,
    'unique_id': 'VIWP1AB29P15LA85784N_odometer',
    'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
  })
# ---
# name: test_unit_conversion[imperial-vw_id_4][sensor.vw_id_4_odometer]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'age': '2019-10-24T00:43:46+00:00',
      'device_class': 'distance',
      'friendly_name': 'VW ID.4 Odometer',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_odometer',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '60879.874176',
  })
# ---
# name: test_update_with_polling_disabled[vw_id_4][sensor.vw_id_4_odometer-api-odometer-request]
  tuple(
    'post',
    URL('http://test.local/v2.0/vehicles/a1d50709-3502-4faa-ba43-a5c7565e6a09/batch'),
    dict({
      'requests': list([
        dict({
          'path': '/odometer',
        }),
      ]),
    }),
    dict({
      'authorization': 'Bearer mock-token',
    }),
  )
# ---
# name: test_update_with_polling_disabled[vw_id_4][sensor.vw_id_4_odometer-registry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.vw_id_4_odometer',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DISTANCE: 'distance'>,
    'original_icon': None,
    'original_name': 'Odometer',
    'platform': 'smartcar',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': None,
    'unique_id': 'VIWP1AB29P15LA85784N_odometer',
    'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
  })
# ---
# name: test_update_with_polling_disabled[vw_id_4][sensor.vw_id_4_odometer]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'distance',
      'friendly_name': 'VW ID.4 Odometer',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_odometer',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[invalid_json-vw_id_4][binary_sensor.vw_id_4_charging_cable_plugged_in]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'plug',
      'friendly_name': 'VW ID.4 Charging Cable Plugged In',
    }),
    'context': <ANY>,
    'entity_id': 'binary_sensor.vw_id_4_charging_cable_plugged_in',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[invalid_json-vw_id_4][device_tracker.vw_id_4_location]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'VW ID.4 Location',
      'icon': 'mdi:car',
    }),
    'context': <ANY>,
    'entity_id': 'device_tracker.vw_id_4_location',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[invalid_json-vw_id_4][lock.vw_id_4_door_lock]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'VW ID.4 Door Lock',
      'supported_features': <LockEntityFeature: 0>,
    }),
    'context': <ANY>,
    'entity_id': 'lock.vw_id_4_door_lock',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[invalid_json-vw_id_4][number.vw_id_4_charge_limit]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'VW ID.4 Charge Limit',
      'icon': 'mdi:battery-charging-80',
      'max': 100.0,
      'min': 50.0,
      'mode': <NumberMode.BOX: 'box'>,
      'step': 1.0,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'number.vw_id_4_charge_limit',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[invalid_json-vw_id_4][sensor.vw_id_4_battery]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'battery',
      'friendly_name': 'VW ID.4 Battery',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_battery',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[invalid_json-vw_id_4][sensor.vw_id_4_battery_capacity]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy_storage',
      'friendly_name': 'VW ID.4 Battery Capacity',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_battery_capacity',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[invalid_json-vw_id_4][sensor.vw_id_4_charging_status]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'VW ID.4 Charging Status',
      'icon': 'mdi:ev-station',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_charging_status',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[invalid_json-vw_id_4][sensor.vw_id_4_engine_oil_life]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'VW ID.4 Engine Oil Life',
      'icon': 'mdi:oil-level',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_engine_oil_life',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[invalid_json-vw_id_4][sensor.vw_id_4_fuel]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'VW ID.4 Fuel',
      'icon': 'mdi:gas-station',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfVolume.LITERS: 'L'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_fuel',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[invalid_json-vw_id_4][sensor.vw_id_4_fuel_percent]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'VW ID.4 Fuel Percent',
      'icon': 'mdi:gas-station',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_fuel_percent',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[invalid_json-vw_id_4][sensor.vw_id_4_fuel_range]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'distance',
      'friendly_name': 'VW ID.4 Fuel Range',
      'icon': 'mdi:map-marker-distance',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_fuel_range',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[invalid_json-vw_id_4][sensor.vw_id_4_odometer]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'distance',
      'friendly_name': 'VW ID.4 Odometer',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_odometer',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[invalid_json-vw_id_4][sensor.vw_id_4_range]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'distance',
      'friendly_name': 'VW ID.4 Range',
      'icon': 'mdi:map-marker-distance',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_range',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[invalid_json-vw_id_4][sensor.vw_id_4_tire_pressure_back_left]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'pressure',
      'friendly_name': 'VW ID.4 Tire Pressure Back Left',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPressure.KPA: 'kPa'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_tire_pressure_back_left',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[invalid_json-vw_id_4][sensor.vw_id_4_tire_pressure_back_right]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'pressure',
      'friendly_name': 'VW ID.4 Tire Pressure Back Right',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPressure.KPA: 'kPa'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_tire_pressure_back_right',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[invalid_json-vw_id_4][sensor.vw_id_4_tire_pressure_front_left]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'pressure',
      'friendly_name': 'VW ID.4 Tire Pressure Front Left',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPressure.KPA: 'kPa'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_tire_pressure_front_left',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[invalid_json-vw_id_4][sensor.vw_id_4_tire_pressure_front_right]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'pressure',
      'friendly_name': 'VW ID.4 Tire Pressure Front Right',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPressure.KPA: 'kPa'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_tire_pressure_front_right',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[invalid_json-vw_id_4][switch.vw_id_4_charging]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'VW ID.4 Charging',
      'icon': 'mdi:ev-plug-type2',
    }),
    'context': <ANY>,
    'entity_id': 'switch.vw_id_4_charging',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[invalid_signature-vw_id_4][binary_sensor.vw_id_4_charging_cable_plugged_in]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'plug',
      'friendly_name': 'VW ID.4 Charging Cable Plugged In',
    }),
    'context': <ANY>,
    'entity_id': 'binary_sensor.vw_id_4_charging_cable_plugged_in',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[invalid_signature-vw_id_4][device_tracker.vw_id_4_location]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'VW ID.4 Location',
      'icon': 'mdi:car',
    }),
    'context': <ANY>,
    'entity_id': 'device_tracker.vw_id_4_location',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[invalid_signature-vw_id_4][lock.vw_id_4_door_lock]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'VW ID.4 Door Lock',
      'supported_features': <LockEntityFeature: 0>,
    }),
    'context': <ANY>,
    'entity_id': 'lock.vw_id_4_door_lock',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[invalid_signature-vw_id_4][number.vw_id_4_charge_limit]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'VW ID.4 Charge Limit',
      'icon': 'mdi:battery-charging-80',
      'max': 100.0,
      'min': 50.0,
      'mode': <NumberMode.BOX: 'box'>,
      'step': 1.0,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'number.vw_id_4_charge_limit',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[invalid_signature-vw_id_4][sensor.vw_id_4_battery]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'battery',
      'friendly_name': 'VW ID.4 Battery',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_battery',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[invalid_signature-vw_id_4][sensor.vw_id_4_battery_capacity]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy_storage',
      'friendly_name': 'VW ID.4 Battery Capacity',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_battery_capacity',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[invalid_signature-vw_id_4][sensor.vw_id_4_charging_status]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'VW ID.4 Charging Status',
      'icon': 'mdi:ev-station',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_charging_status',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[invalid_signature-vw_id_4][sensor.vw_id_4_engine_oil_life]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'VW ID.4 Engine Oil Life',
      'icon': 'mdi:oil-level',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_engine_oil_life',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[invalid_signature-vw_id_4][sensor.vw_id_4_fuel]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'VW ID.4 Fuel',
      'icon': 'mdi:gas-station',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfVolume.LITERS: 'L'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_fuel',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[invalid_signature-vw_id_4][sensor.vw_id_4_fuel_percent]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'VW ID.4 Fuel Percent',
      'icon': 'mdi:gas-station',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_fuel_percent',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[invalid_signature-vw_id_4][sensor.vw_id_4_fuel_range]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'distance',
      'friendly_name': 'VW ID.4 Fuel Range',
      'icon': 'mdi:map-marker-distance',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_fuel_range',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[invalid_signature-vw_id_4][sensor.vw_id_4_odometer]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'distance',
      'friendly_name': 'VW ID.4 Odometer',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_odometer',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[invalid_signature-vw_id_4][sensor.vw_id_4_range]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'distance',
      'friendly_name': 'VW ID.4 Range',
      'icon': 'mdi:map-marker-distance',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_range',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[invalid_signature-vw_id_4][sensor.vw_id_4_tire_pressure_back_left]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'pressure',
      'friendly_name': 'VW ID.4 Tire Pressure Back Left',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPressure.KPA: 'kPa'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_tire_pressure_back_left',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[invalid_signature-vw_id_4][sensor.vw_id_4_tire_pressure_back_right]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'pressure',
      'friendly_name': 'VW ID.4 Tire Pressure Back Right',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPressure.KPA: 'kPa'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_tire_pressure_back_right',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[invalid_signature-vw_id_4][sensor.vw_id_4_tire_pressure_front_left]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'pressure',
      'friendly_name': 'VW ID.4 Tire Pressure Front Left',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPressure.KPA: 'kPa'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_tire_pressure_front_left',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[invalid_signature-vw_id_4][sensor.vw_id_4_tire_pressure_front_right]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'pressure',
      'friendly_name': 'VW ID.4 Tire Pressure Front Right',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPressure.KPA: 'kPa'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_tire_pressure_front_right',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[invalid_signature-vw_id_4][switch.vw_id_4_charging]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'VW ID.4 Charging',
      'icon': 'mdi:ev-plug-type2',
    }),
    'context': <ANY>,
    'entity_id': 'switch.vw_id_4_charging',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[vehicle_error-vw_id_4][binary_sensor.vw_id_4_charging_cable_plugged_in]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'plug',
      'friendly_name': 'VW ID.4 Charging Cable Plugged In',
    }),
    'context': <ANY>,
    'entity_id': 'binary_sensor.vw_id_4_charging_cable_plugged_in',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[vehicle_error-vw_id_4][device_tracker.vw_id_4_location]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'VW ID.4 Location',
      'icon': 'mdi:car',
    }),
    'context': <ANY>,
    'entity_id': 'device_tracker.vw_id_4_location',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[vehicle_error-vw_id_4][lock.vw_id_4_door_lock]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'VW ID.4 Door Lock',
      'supported_features': <LockEntityFeature: 0>,
    }),
    'context': <ANY>,
    'entity_id': 'lock.vw_id_4_door_lock',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[vehicle_error-vw_id_4][number.vw_id_4_charge_limit]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'VW ID.4 Charge Limit',
      'icon': 'mdi:battery-charging-80',
      'max': 100.0,
      'min': 50.0,
      'mode': <NumberMode.BOX: 'box'>,
      'step': 1.0,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'number.vw_id_4_charge_limit',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[vehicle_error-vw_id_4][sensor.vw_id_4_battery]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'battery',
      'friendly_name': 'VW ID.4 Battery',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_battery',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[vehicle_error-vw_id_4][sensor.vw_id_4_battery_capacity]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy_storage',
      'friendly_name': 'VW ID.4 Battery Capacity',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_battery_capacity',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[vehicle_error-vw_id_4][sensor.vw_id_4_charging_status]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'VW ID.4 Charging Status',
      'icon': 'mdi:ev-station',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_charging_status',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[vehicle_error-vw_id_4][sensor.vw_id_4_engine_oil_life]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'VW ID.4 Engine Oil Life',
      'icon': 'mdi:oil-level',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_engine_oil_life',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[vehicle_error-vw_id_4][sensor.vw_id_4_fuel]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'VW ID.4 Fuel',
      'icon': 'mdi:gas-station',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfVolume.LITERS: 'L'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_fuel',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[vehicle_error-vw_id_4][sensor.vw_id_4_fuel_percent]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'VW ID.4 Fuel Percent',
      'icon': 'mdi:gas-station',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_fuel_percent',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[vehicle_error-vw_id_4][sensor.vw_id_4_fuel_range]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'distance',
      'friendly_name': 'VW ID.4 Fuel Range',
      'icon': 'mdi:map-marker-distance',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_fuel_range',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[vehicle_error-vw_id_4][sensor.vw_id_4_odometer]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'distance',
      'friendly_name': 'VW ID.4 Odometer',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_odometer',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[vehicle_error-vw_id_4][sensor.vw_id_4_range]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'distance',
      'friendly_name': 'VW ID.4 Range',
      'icon': 'mdi:map-marker-distance',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_range',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[vehicle_error-vw_id_4][sensor.vw_id_4_tire_pressure_back_left]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'pressure',
      'friendly_name': 'VW ID.4 Tire Pressure Back Left',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPressure.KPA: 'kPa'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_tire_pressure_back_left',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[vehicle_error-vw_id_4][sensor.vw_id_4_tire_pressure_back_right]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'pressure',
      'friendly_name': 'VW ID.4 Tire Pressure Back Right',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPressure.KPA: 'kPa'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_tire_pressure_back_right',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[vehicle_error-vw_id_4][sensor.vw_id_4_tire_pressure_front_left]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'pressure',
      'friendly_name': 'VW ID.4 Tire Pressure Front Left',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPressure.KPA: 'kPa'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_tire_pressure_front_left',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[vehicle_error-vw_id_4][sensor.vw_id_4_tire_pressure_front_right]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'pressure',
      'friendly_name': 'VW ID.4 Tire Pressure Front Right',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPressure.KPA: 'kPa'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_tire_pressure_front_right',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[vehicle_error-vw_id_4][switch.vw_id_4_charging]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'VW ID.4 Charging',
      'icon': 'mdi:ev-plug-type2',
    }),
    'context': <ANY>,
    'entity_id': 'switch.vw_id_4_charging',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[vehicle_mismatch-vw_id_4][binary_sensor.vw_id_4_charging_cable_plugged_in]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'plug',
      'friendly_name': 'VW ID.4 Charging Cable Plugged In',
    }),
    'context': <ANY>,
    'entity_id': 'binary_sensor.vw_id_4_charging_cable_plugged_in',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[vehicle_mismatch-vw_id_4][device_tracker.vw_id_4_location]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'VW ID.4 Location',
      'icon': 'mdi:car',
    }),
    'context': <ANY>,
    'entity_id': 'device_tracker.vw_id_4_location',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[vehicle_mismatch-vw_id_4][lock.vw_id_4_door_lock]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'VW ID.4 Door Lock',
      'supported_features': <LockEntityFeature: 0>,
    }),
    'context': <ANY>,
    'entity_id': 'lock.vw_id_4_door_lock',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[vehicle_mismatch-vw_id_4][number.vw_id_4_charge_limit]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'VW ID.4 Charge Limit',
      'icon': 'mdi:battery-charging-80',
      'max': 100.0,
      'min': 50.0,
      'mode': <NumberMode.BOX: 'box'>,
      'step': 1.0,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'number.vw_id_4_charge_limit',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[vehicle_mismatch-vw_id_4][sensor.vw_id_4_battery]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'battery',
      'friendly_name': 'VW ID.4 Battery',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_battery',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[vehicle_mismatch-vw_id_4][sensor.vw_id_4_battery_capacity]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy_storage',
      'friendly_name': 'VW ID.4 Battery Capacity',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_battery_capacity',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[vehicle_mismatch-vw_id_4][sensor.vw_id_4_charging_status]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'VW ID.4 Charging Status',
      'icon': 'mdi:ev-station',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_charging_status',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[vehicle_mismatch-vw_id_4][sensor.vw_id_4_engine_oil_life]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'VW ID.4 Engine Oil Life',
      'icon': 'mdi:oil-level',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_engine_oil_life',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[vehicle_mismatch-vw_id_4][sensor.vw_id_4_fuel]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'VW ID.4 Fuel',
      'icon': 'mdi:gas-station',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfVolume.LITERS: 'L'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_fuel',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[vehicle_mismatch-vw_id_4][sensor.vw_id_4_fuel_percent]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'VW ID.4 Fuel Percent',
      'icon': 'mdi:gas-station',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_fuel_percent',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[vehicle_mismatch-vw_id_4][sensor.vw_id_4_fuel_range]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'distance',
      'friendly_name': 'VW ID.4 Fuel Range',
      'icon': 'mdi:map-marker-distance',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_fuel_range',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[vehicle_mismatch-vw_id_4][sensor.vw_id_4_odometer]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'distance',
      'friendly_name': 'VW ID.4 Odometer',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_odometer',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[vehicle_mismatch-vw_id_4][sensor.vw_id_4_range]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'distance',
      'friendly_name': 'VW ID.4 Range',
      'icon': 'mdi:map-marker-distance',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_range',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[vehicle_mismatch-vw_id_4][sensor.vw_id_4_tire_pressure_back_left]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'pressure',
      'friendly_name': 'VW ID.4 Tire Pressure Back Left',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPressure.KPA: 'kPa'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_tire_pressure_back_left',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[vehicle_mismatch-vw_id_4][sensor.vw_id_4_tire_pressure_back_right]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'pressure',
      'friendly_name': 'VW ID.4 Tire Pressure Back Right',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPressure.KPA: 'kPa'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_tire_pressure_back_right',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[vehicle_mismatch-vw_id_4][sensor.vw_id_4_tire_pressure_front_left]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'pressure',
      'friendly_name': 'VW ID.4 Tire Pressure Front Left',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPressure.KPA: 'kPa'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_tire_pressure_front_left',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[vehicle_mismatch-vw_id_4][sensor.vw_id_4_tire_pressure_front_right]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'pressure',
      'friendly_name': 'VW ID.4 Tire Pressure Front Right',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPressure.KPA: 'kPa'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_tire_pressure_front_right',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[vehicle_mismatch-vw_id_4][switch.vw_id_4_charging]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'VW ID.4 Charging',
      'icon': 'mdi:ev-plug-type2',
    }),
    'context': <ANY>,
    'entity_id': 'switch.vw_id_4_charging',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[vehicle_state-vw_id_4][binary_sensor.vw_id_4_charging_cable_plugged_in]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'plug',
      'friendly_name': 'VW ID.4 Charging Cable Plugged In',
    }),
    'context': <ANY>,
    'entity_id': 'binary_sensor.vw_id_4_charging_cable_plugged_in',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[vehicle_state-vw_id_4][device_tracker.vw_id_4_location]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'VW ID.4 Location',
      'icon': 'mdi:car',
    }),
    'context': <ANY>,
    'entity_id': 'device_tracker.vw_id_4_location',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[vehicle_state-vw_id_4][lock.vw_id_4_door_lock]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'VW ID.4 Door Lock',
      'supported_features': <LockEntityFeature: 0>,
    }),
    'context': <ANY>,
    'entity_id': 'lock.vw_id_4_door_lock',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[vehicle_state-vw_id_4][number.vw_id_4_charge_limit]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'age': '2025-09-18T23:30:32+00:00',
      'fetched_at': '2025-09-18T23:39:43.086000+00:00',
      'friendly_name': 'VW ID.4 Charge Limit',
      'icon': 'mdi:battery-charging-80',
      'max': 100.0,
      'min': 50.0,
      'mode': <NumberMode.BOX: 'box'>,
      'step': 1.0,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'number.vw_id_4_charge_limit',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '80',
  })
# ---
# name: test_webhook_update[vehicle_state-vw_id_4][sensor.vw_id_4_battery]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'age': '2025-09-18T23:30:33+00:00',
      'device_class': 'battery',
      'fetched_at': '2025-09-18T23:39:43.086000+00:00',
      'friendly_name': 'VW ID.4 Battery',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_battery',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '42',
  })
# ---
# name: test_webhook_update[vehicle_state-vw_id_4][sensor.vw_id_4_battery_capacity]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy_storage',
      'friendly_name': 'VW ID.4 Battery Capacity',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_battery_capacity',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[vehicle_state-vw_id_4][sensor.vw_id_4_charging_status]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'VW ID.4 Charging Status',
      'icon': 'mdi:ev-station',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_charging_status',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[vehicle_state-vw_id_4][sensor.vw_id_4_engine_oil_life]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'VW ID.4 Engine Oil Life',
      'icon': 'mdi:oil-level',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_engine_oil_life',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[vehicle_state-vw_id_4][sensor.vw_id_4_fuel]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'VW ID.4 Fuel',
      'icon': 'mdi:gas-station',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfVolume.LITERS: 'L'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_fuel',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[vehicle_state-vw_id_4][sensor.vw_id_4_fuel_percent]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'VW ID.4 Fuel Percent',
      'icon': 'mdi:gas-station',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_fuel_percent',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[vehicle_state-vw_id_4][sensor.vw_id_4_fuel_range]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'distance',
      'friendly_name': 'VW ID.4 Fuel Range',
      'icon': 'mdi:map-marker-distance',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_fuel_range',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[vehicle_state-vw_id_4][sensor.vw_id_4_odometer]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'age': '2025-09-18T23:29:36.603000+00:00',
      'device_class': 'distance',
      'fetched_at': '2025-09-18T23:39:42.829000+00:00',
      'friendly_name': 'VW ID.4 Odometer',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_odometer',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '62041',
  })
# ---
# name: test_webhook_update[vehicle_state-vw_id_4][sensor.vw_id_4_range]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'distance',
      'friendly_name': 'VW ID.4 Range',
      'icon': 'mdi:map-marker-distance',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_range',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[vehicle_state-vw_id_4][sensor.vw_id_4_tire_pressure_back_left]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'pressure',
      'friendly_name': 'VW ID.4 Tire Pressure Back Left',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPressure.KPA: 'kPa'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_tire_pressure_back_left',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[vehicle_state-vw_id_4][sensor.vw_id_4_tire_pressure_back_right]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'pressure',
      'friendly_name': 'VW ID.4 Tire Pressure Back Right',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPressure.KPA: 'kPa'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_tire_pressure_back_right',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[vehicle_state-vw_id_4][sensor.vw_id_4_tire_pressure_front_left]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'pressure',
      'friendly_name': 'VW ID.4 Tire Pressure Front Left',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPressure.KPA: 'kPa'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_tire_pressure_front_left',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[vehicle_state-vw_id_4][sensor.vw_id_4_tire_pressure_front_right]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'pressure',
      'friendly_name': 'VW ID.4 Tire Pressure Front Right',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPressure.KPA: 'kPa'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_tire_pressure_front_right',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[vehicle_state-vw_id_4][switch.vw_id_4_charging]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'VW ID.4 Charging',
      'icon': 'mdi:ev-plug-type2',
    }),
    'context': <ANY>,
    'entity_id': 'switch.vw_id_4_charging',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'off',
  })
# ---
# name: test_webhook_update[verify-vw_id_4][binary_sensor.vw_id_4_charging_cable_plugged_in]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'plug',
      'friendly_name': 'VW ID.4 Charging Cable Plugged In',
    }),
    'context': <ANY>,
    'entity_id': 'binary_sensor.vw_id_4_charging_cable_plugged_in',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[verify-vw_id_4][device_tracker.vw_id_4_location]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'VW ID.4 Location',
      'icon': 'mdi:car',
    }),
    'context': <ANY>,
    'entity_id': 'device_tracker.vw_id_4_location',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[verify-vw_id_4][lock.vw_id_4_door_lock]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'VW ID.4 Door Lock',
      'supported_features': <LockEntityFeature: 0>,
    }),
    'context': <ANY>,
    'entity_id': 'lock.vw_id_4_door_lock',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[verify-vw_id_4][number.vw_id_4_charge_limit]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'VW ID.4 Charge Limit',
      'icon': 'mdi:battery-charging-80',
      'max': 100.0,
      'min': 50.0,
      'mode': <NumberMode.BOX: 'box'>,
      'step': 1.0,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'number.vw_id_4_charge_limit',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[verify-vw_id_4][sensor.vw_id_4_battery]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'battery',
      'friendly_name': 'VW ID.4 Battery',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_battery',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[verify-vw_id_4][sensor.vw_id_4_battery_capacity]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy_storage',
      'friendly_name': 'VW ID.4 Battery Capacity',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_battery_capacity',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[verify-vw_id_4][sensor.vw_id_4_charging_status]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'VW ID.4 Charging Status',
      'icon': 'mdi:ev-station',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_charging_status',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[verify-vw_id_4][sensor.vw_id_4_engine_oil_life]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'VW ID.4 Engine Oil Life',
      'icon': 'mdi:oil-level',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_engine_oil_life',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[verify-vw_id_4][sensor.vw_id_4_fuel]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'VW ID.4 Fuel',
      'icon': 'mdi:gas-station',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfVolume.LITERS: 'L'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_fuel',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[verify-vw_id_4][sensor.vw_id_4_fuel_percent]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'VW ID.4 Fuel Percent',
      'icon': 'mdi:gas-station',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_fuel_percent',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[verify-vw_id_4][sensor.vw_id_4_fuel_range]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'distance',
      'friendly_name': 'VW ID.4 Fuel Range',
      'icon': 'mdi:map-marker-distance',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_fuel_range',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[verify-vw_id_4][sensor.vw_id_4_odometer]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'distance',
      'friendly_name': 'VW ID.4 Odometer',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_odometer',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[verify-vw_id_4][sensor.vw_id_4_range]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'distance',
      'friendly_name': 'VW ID.4 Range',
      'icon': 'mdi:map-marker-distance',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_range',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[verify-vw_id_4][sensor.vw_id_4_tire_pressure_back_left]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'pressure',
      'friendly_name': 'VW ID.4 Tire Pressure Back Left',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPressure.KPA: 'kPa'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_tire_pressure_back_left',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[verify-vw_id_4][sensor.vw_id_4_tire_pressure_back_right]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'pressure',
      'friendly_name': 'VW ID.4 Tire Pressure Back Right',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPressure.KPA: 'kPa'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_tire_pressure_back_right',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[verify-vw_id_4][sensor.vw_id_4_tire_pressure_front_left]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'pressure',
      'friendly_name': 'VW ID.4 Tire Pressure Front Left',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPressure.KPA: 'kPa'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_tire_pressure_front_left',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[verify-vw_id_4][sensor.vw_id_4_tire_pressure_front_right]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'pressure',
      'friendly_name': 'VW ID.4 Tire Pressure Front Right',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPressure.KPA: 'kPa'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.vw_id_4_tire_pressure_front_right',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_webhook_update[verify-vw_id_4][switch.vw_id_4_charging]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'VW ID.4 Charging',
      'icon': 'mdi:ev-plug-type2',
    }),
    'context': <ANY>,
    'entity_id': 'switch.vw_id_4_charging',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
